import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main{
    // step2: 이진탐색
    static int binarySearch(int[] arr, int target){
        int cnt = 0;

        int left = 0;
        int right = arr.length - 1;

        while (left <= right){
            int mid = (left+right) / 2;

            if(arr[mid] == target) {
                cnt++;

                if(mid < right) {
                    if (arr[mid + 1] == target) left = mid + 1;
                    else if (arr[mid - 1] == target) right = mid - 1;
                    else if (arr[mid + 1] != target) return cnt;
                }
                else left = mid + 1;
            }
            else if(arr[mid] < target) left = mid+1;
            else right = mid -1;
        }
        return cnt;
    }

    static void solution(int N, int M, int[] N_num, int[] M_num){
        Arrays.sort(N_num);

        for(int i=0; i<M; i++){
            int cnt = binarySearch(N_num, M_num[i]);
            System.out.print(cnt +" ");

        }
    }
    public static void main(String[] args) throws Exception{

        // step1: N, M (1 <= N, M <= 500,000), -10,000,000 <= 각 숫자 <= 10,000,000
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int N = Integer.parseInt(br.readLine());

        int[] N_num = new int[N];
        StringTokenizer st = new StringTokenizer(br.readLine());
        for(int i=0; i<N; i++) N_num[i] = Integer.parseInt(st.nextToken());

        int M = Integer.parseInt(br.readLine());

        int[] M_num = new int[M];
        st = new StringTokenizer(br.readLine());
        for(int i=0; i<M; i++) M_num[i] = Integer.parseInt(st.nextToken());

        solution(N, M, N_num, M_num);
    }
}