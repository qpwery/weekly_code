import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
import java.util.Arrays;

public class Main{
    // 이진 탐색 (블로그 참고)
    static boolean binarySearch(int[] arr, int target){
        int left = 0;
        int right = arr.length -1;

        while(left <= right){
            int mid = (left + right) / 2;

            if(arr[mid] == target)  return true;
            else if(arr[mid] < target)  left = mid + 1;
            else right = mid - 1;
        }

        return false;
    }

    static void solution(int N, int M, int[] N_num, int[] M_num){
        Arrays.sort(N_num); // 정렬

        for(int i=0; i<M; i++){
            if(binarySearch(N_num, M_num[i]))   System.out.print(1 +" ");
            else    System.out.print(0 + " ");
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int N = Integer.parseInt(br.readLine()); // 가지고 있는 숫자 카드의 개수, 1 <= N <= 500,000
        int[] N_num = new int[N]; // 숫자 카드에 적혀있는 정수 (-10,000,000 <= N_num[i] <= 10,000,000)
        StringTokenizer st = new StringTokenizer(br.readLine());
        for(int i=0; i<N; i++)  N_num[i] = Integer.parseInt(st.nextToken());


        int M = Integer.parseInt(br.readLine()); // 숫자 카드 개수, 1 <= M <= 500,000
        int[] M_num = new int[M]; // 가지고 있는 숫자 카드인지 아닌지를 구해야 할 M개의 정수 (-10,000,000 <= M_num[i] <= 10,000,000)
        st = new StringTokenizer(br.readLine());
        for(int i=0; i<M; i++)  M_num[i] = Integer.parseInt(st.nextToken());

        solution(N, M, N_num, M_num);
    }
}